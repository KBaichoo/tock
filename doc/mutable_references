# Mutable References in Tock

Ownership and Borrowing are two of the most fundamental design choices in Rust as it,by nature, prevents race
conditions and makes prevents the dangaling pointer problem. To read more about these concepts, I'd recommend 
[this](http://words.steveklabnik.com/a-30-minute-introduction-to-rust).

In Rust, you can either have one mutable reference to a place in memory or an "infinite" amount of read-only references.
It's also used to simply reference large segments of memory (that you wouldn't want to move or copy every function call),
and is backed underneath by pointers (** This is my hunch of how I'd do it **). Given that read and write are mutally 
exclusive of borrows is implemented, it's simple impossible to run into a race condition using safe rust.

But, what does this mean for Tock? It's a single-threaded enviroment right now, so clearly we won't have race-conditions
anyway. The problem with the Tock and the borrowing system arises when we consider memory used in Tock. For example, 
multiple processes might want to use the same UART. 


3) Mutable references in Tock. Since borrows are so critical in Rust, and they raise issues in 
event-driven code without a heap, we need to explain how Tock structures its code (memory containers).
